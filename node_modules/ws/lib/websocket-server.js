?: Property$BorderTopRightRadius<TLength>,
  borderTopStyle?: Property$BorderTopStyle,
  borderTopWidth?: Property$BorderTopWidth<TLength>,
  bottom?: Property$Bottom<TLength>,
  boxDecorationBreak?: Property$BoxDecorationBreak,
  boxShadow?: Property$BoxShadow,
  boxSizing?: Property$BoxSizing,
  breakAfter?: Property$BreakAfter,
  breakBefore?: Property$BreakBefore,
  breakInside?: Property$BreakInside,
  captionSide?: Property$CaptionSide,
  caretColor?: Property$CaretColor,
  caretShape?: Property$CaretShape,
  clear?: Property$Clear,
  clipPath?: Property$ClipPath,
  color?: Property$Color,
  colorAdjust?: Property$PrintColorAdjust,
  colorScheme?: Property$ColorScheme,
  columnCount?: Property$ColumnCount,
  columnFill?: Property$ColumnFill,
  columnGap?: Property$ColumnGap<TLength>,
  columnRuleColor?: Property$ColumnRuleColor,
  columnRuleStyle?: Property$ColumnRuleStyle,
  columnRuleWidth?: Property$ColumnRuleWidth<TLength>,
  columnSpan?: Property$ColumnSpan,
  columnWidth?: Property$ColumnWidth<TLength>,
  contain?: Property$Contain,
  containIntrinsicBlockSize?: Property$ContainIntrinsicBlockSize<TLength>,
  containIntrinsicHeight?: Property$ContainIntrinsicHeight<TLength>,
  containIntrinsicInlineSize?: Property$ContainIntrinsicInlineSize<TLength>,
  containIntrinsicWidth?: Property$ContainIntrinsicWidth<TLength>,
  containerName?: Property$ContainerName,
  containerType?: Property$ContainerType,
  content?: Property$Content,
  contentVisibility?: Property$ContentVisibility,
  counterIncrement?: Property$CounterIncrement,
  counterReset?: Property$CounterReset,
  counterSet?: Property$CounterSet,
  cursor?: Property$Cursor,
  direction?: Property$Direction,
  display?: Property$Display,
  emptyCells?: Property$EmptyCells,
  filter?: Property$Filter,
  flexBasis?: Property$FlexBasis<TLength>,
  flexDirection?: Property$FlexDirection,
  flexGrow?: Property$FlexGrow,
  flexShrink?: Property$FlexShrink,
  flexWrap?: Property$FlexWrap,
  float?: Property$Float,
  fontFamily?: Property$FontFamily,
  fontFeatureSettings?: Property$FontFeatureSettings,
  fontKerning?: Property$FontKerning,
  fontLanguageOverride?: Property$FontLanguageOverride,
  fontOpticalSizing?: Property$FontOpticalSizing,
  fontPalette?: Property$FontPalette,
  fontSize?: Property$FontSize<TLength>,
  fontSizeAdjust?: Property$FontSizeAdjust,
  fontSmooth?: Property$FontSmooth<TLength>,
  fontStretch?: Property$FontStretch,
  fontStyle?: Property$FontStyle,
  fontSynthesis?: Property$FontSynthesis,
  fontSynthesisPosition?: Property$FontSynthesisPosition,
  fontSynthesisSmallCaps?: Property$FontSynthesisSmallCaps,
  fontSynthesisStyle?: Property$FontSynthesisStyle,
  fontSynthesisWeight?: Property$FontSynthesisWeight,
  fontVariant?: Property$FontVariant,
  fontVariantAlternates?: Property$FontVariantAlternates,
  fontVariantCaps?: Property$FontVariantCaps,
  fontVariantEastAsian?: Property$FontVariantEastAsian,
  fontVariantEmoji?: Property$FontVariantEmoji,
  fontVariantLigatures?: Property$FontVariantLigatures,
  fontVariantNumeric?: Property$FontVariantNumeric,
  fontVariantPosition?: Property$FontVariantPosition,
  fontVariationSettings?: Property$FontVariationSettings,
  fontWeight?: Property$FontWeight,
  forcedColorAdjust?: Property$ForcedColorAdjust,
  gridAutoColumns?: Property$GridAutoColumns<TLength>,
  gridAutoFlow?: Property$GridAutoFlow,
  gridAutoRows?: Property$GridAutoRows<TLength>,
  gridColumnEnd?: Property$GridColumnEnd,
  gridColumnStart?: Property$GridColumnStart,
  gridRowEnd?: Property$GridRowEnd,
  gridRowStart?: Property$GridRowStart,
  gridTemplateAreas?: Property$GridTemplateAreas,
  gridTemplateColumns?: Property$GridTemplateColumns<TLength>,
  gridTemplateRows?: Property$GridTemplateRows<TLength>,
  hangingPunctuation?: Property$HangingPunctuation,
  height?: Property$Height<TLength>,
  hyphenateCharacter?: Property$HyphenateCharacter,
  hyphenateLimitChars?: Property$HyphenateLimitChars,
  hyphens?: Property$Hyphens,
  imageOrientation?: Property$ImageOrientation,
  imageRendering?: Property$ImageRendering,
  imageResolution?: Property$ImageResolution,
  initialLetter?: Property$InitialLetter,
  inlineSize?: Property$InlineSize<TLength>,
  inputSecurity?: Property$InputSecurity,
  insetBlockEnd?: Property$InsetBlockEnd<TLength>,
  insetBlockStart?: Property$InsetBlockStart<TLength>,
  insetInlineEnd?: Property$InsetInlineEnd<TLength>,
  insetInlineStart?: Property$InsetInlineStart<TLength>,
  isolation?: Property$Isolation,
  justifyContent?: Property$JustifyContent,
  justifyItems?: Property$JustifyItems,
  justifySelf?: Property$JustifySelf,
  justifyTracks?: Property$JustifyTracks,
  left?: Property$Left<TLength>,
  letterSpacing?: Property$LetterSpacing<TLength>,
  lineBreak?: Property$LineBreak,
  lineHeight?: Property$LineHeight<TLength>,
  lineHeightStep?: Property$LineHeightStep<TLength>,
  listStyleImage?: Property$ListStyleImage,
  listStylePosition?: Property$ListStylePosition,
  listStyleType?: Property$ListStyleType,
  marginBlockEnd?: Property$MarginBlockEnd<TLength>,
  marginBlockStart?: Property$MarginBlockStart<TLength>,
  marginBottom?: Property$MarginBottom<TLength>,
  marginInlineEnd?: Property$MarginInlineEnd<TLength>,
  marginInlineStart?: Property$MarginInlineStart<TLength>,
  marginLeft?: Property$MarginLeft<TLength>,
  marginRight?: Property$MarginRight<TLength>,
  marginTop?: Property$MarginTop<TLength>,
  marginTrim?: Property$MarginTrim,
  maskBorderMode?: Property$MaskBorderMode,
  maskBorderOutset?: Property$MaskBorderOutset<TLength>,
  maskBorderRepeat?: Property$MaskBorderRepeat,
  maskBorderSlice?: Property$MaskBorderSlice,
  maskBorderSource?: Property$MaskBorderSource,
  maskBorderWidth?: Property$MaskBorderWidth<TLength>,
  maskClip?: Property$MaskClip,
  maskComposite?: Property$MaskComposite,
  maskImage?: Property$MaskImage,
  maskMode?: Property$MaskMode,
  maskOrigin?: Property$MaskOrigin,
  maskPosition?: Property$MaskPosition<TLength>,
  maskRepeat?: Property$MaskRepeat,
  maskSize?: Property$MaskSize<TLength>,
  maskType?: Property$MaskType,
  masonryAutoFlow?: Property$MasonryAutoFlow,
  mathDepth?: Property$MathDepth,
  mathShift?: Property$MathShift,
  mathStyle?: Property$MathStyle,
  maxBlockSize?: Property$MaxBlockSize<TLength>,
  maxHeight?: Property$MaxHeight<TLength>,
  maxInlineSize?: Property$MaxInlineSize<TLength>,
  maxLines?: Property$MaxLines,
  maxWidth?: Property$MaxWidth<TLength>,
  minBlockSize?: Property$MinBlockSize<TLength>,
  minHeight?: Property$MinHeight<TLength>,
  minInlineSize?: Property$MinInlineSize<TLength>,
  minWidth?: Property$MinWidth<TLength>,
  mixBlendMode?: Property$MixBlendMode,
  motionDistance?: Property$OffsetDistance<TLength>,
  motionPath?: Property$OffsetPath,
  motionRotation?: Property$OffsetRotate,
  objectFit?: Property$ObjectFit,
  objectPosition?: Property$ObjectPosition<TLength>,
  offsetAnchor?: Property$OffsetAnchor<TLength>,
  offsetDistance?: Property$OffsetDistance<TLength>,
  offsetPath?: Property$OffsetPath,
  offsetPosition?: Property$OffsetPosition<TLength>,
  offsetRotate?: Property$OffsetRotate,
  offsetRotation?: Property$OffsetRotate,
  opacity?: Property$Opacity,
  order?: Property$Order,
  orphans?: Property$Orphans,
  outlineColor?: Property$OutlineColor,
  outlineOffset?: Property$OutlineOffset<TLength>,
  outlineStyle?: Property$OutlineStyle,
  outlineWidth?: Property$OutlineWidth<TLength>,
  overflowAnchor?: Property$OverflowAnchor,
  overflowBlock?: Property$OverflowBlock,
  overflowClipBox?: Property$OverflowClipBox,
  overflowClipMargin?: Property$OverflowClipMargin<TLength>,
  overflowInline?: Property$OverflowInline,
  overflowWrap?: Property$OverflowWrap,
  overflowX?: Property$OverflowX,
  overflowY?: Property$OverflowY,
  overlay?: Property$Overlay,
  overscrollBehaviorBlock?: Property$OverscrollBehaviorBlock,
  overscrollBehaviorInline?: Property$OverscrollBehaviorInline,
  overscrollBehaviorX?: Property$OverscrollBehaviorX,
  overscrollBehaviorY?: Property$OverscrollBehaviorY,
  paddingBlockEnd?: Property$PaddingBlockEnd<TLength>,
  paddingBlockStart?: Property$PaddingBlockStart<TLength>,
  paddingBottom?: Property$PaddingBottom<TLength>,
  paddingInlineEnd?: Property$PaddingInlineEnd<TLength>,
  paddingInlineStart?: Property$PaddingInlineStart<TLength>,
  paddingLeft?: Property$PaddingLeft<TLength>,
  paddingRight?: Property$PaddingRight<TLength>,
  paddingTop?: Property$PaddingTop<TLength>,
  page?: Property$Page,
  pageBreakAfter?: Property$PageBreakAfter,
  pageBreakBefore?: Property$PageBreakBefore,
  pageBreakInside?: Property$PageBreakInside,
  paintOrder?: Property$PaintOrder,
  perspective?: Property$Perspective<TLength>,
  perspectiveOrigin?: Property$PerspectiveOrigin<TLength>,
  pointerEvents?: Property$PointerEvents,
  position?: Property$Position,
  printColorAdjust?: Property$PrintColorAdjust,
  quotes?: Property$Quotes,
  resize?: Property$Resize,
  right?: Property$Right<TLength>,
  rotate?: Property$Rotate,
  rowGap?: Property$RowGap<TLength>,
  rubyAlign?: Property$RubyAlign,
  rubyMerge?: Property$RubyMerge,
  rubyPosition?: Property$RubyPosition,
  scale?: Property$Scale,
  scrollBehavior?: Property$ScrollBehavior,
  scrollMarginBlockEnd?: Property$ScrollMarginBlockEnd<TLength>,
  scrollMarginBlockStart?: Property$ScrollMarginBlockStart<TLength>,
  scrollMarginBottom?: Property$ScrollMarginBottom<TLength>,
  scrollMarginInlineEnd?: Property$ScrollMarginInlineEnd<TLength>,
  scrollMarginInlineStart?: Property$ScrollMarginInlineStart<TLength>,
  scrollMarginLeft?: Property$ScrollMarginLeft<TLength>,
  scrollMarginRight?: Property$ScrollMarginRight<TLength>,
  scrollMarginTop?: Property$ScrollMarginTop<TLength>,
  scrollPaddingBlockEnd?: Property$ScrollPaddingBlockEnd<TLength>,
  scrollPaddingBlockStart?: Property$ScrollPaddingBlockStart<TLength>,
  scrollPaddingBottom?: Property$ScrollPaddingBottom<TLength>,
  scrollPaddingInlineEnd?: Property$ScrollPaddingInlineEnd<TLength>,
  scrollPaddingInlineStart?: Property$ScrollPaddingInlineStart<TLength>,
  scrollPaddingLeft?: Property$ScrollPaddingLeft<TLength>,
  scrollPaddingRight?: Property$ScrollPaddingRight<TLength>,
  scrollPaddingTop?: Property$ScrollPaddingTop<TLength>,
  scrollSnapAlign?: Property$ScrollSnapAlign,
  scrollSnapMarginBottom?: Property$ScrollMarginBottom<TLength>,
  scrollSnapMarginLeft?: Property$ScrollMarginLeft<TLength>,
  scrollSnapMarginRight?: Property$ScrollMarginRight<TLength>,
  scrollSnapMarginTop?: Property$ScrollMarginTop<TLength>,
  scrollSnapStop?: Property$ScrollSnapStop,
  scrollSnapType?: Property$ScrollSnapType,
  scrollTimelineAxis?: Property$ScrollTimelineAxis,
  scrollTimelineName?: Property$ScrollTimelineName,
  scrollbarColor?: Property$ScrollbarColor,
  scrollbarGutter?: Property$ScrollbarGutter,
  scrollbarWidth?: Property$ScrollbarWidth,
  shapeImageThreshold?: Property$ShapeImageThreshold,
  shapeMargin?: Property$ShapeMargin<TLength>,
  shapeOutside?: Property$ShapeOutside,
  tabSize?: Property$TabSize<TLength>,
  tableLayout?: Property$TableLayout,
  textAlign?: Property$TextAlign,
  textAlignLast?: Property$TextAlignLast,
  textCombineUpright?: Property$TextCombineUpright,
  textDecorationColor?: Property$TextDecorationColor,
  textDecorationLine?: Property$TextDecorationLine,
  textDecorationSkip?: Property$TextDecorationSkip,
  textDecorationSkipInk?: Property$TextDecorationSkipInk,
  textDecorationStyle?: Property$TextDecorationStyle,
  textDecorationThickness?: Property$TextDecorationThickness<TLength>,
  textEmphasisColor?: Property$TextEmphasisColor,
  textEmphasisPosition?: Property$TextEmphasisPosition,
  textEmphasisStyle?: Property$TextEmphasisStyle,
  textIndent?: Property$TextIndent<TLength>,
  textJustify?: Property$TextJustify,
  textOrientation?: Property$TextOrientation,
  textOverflow?: Property$TextOverflow,
  textRendering?: Property$TextRendering,
  textShadow?: Property$TextShadow,
  textSizeAdjust?: Property$TextSizeAdjust,
  textTransform?: Property$TextTransform,
  textUnderlineOffset?: Property$TextUnderlineOffset<TLength>,
  textUnderlinePosition?: Property$TextUnderlinePosition,
  textWrap?: Property$TextWrap,
  timelineScope?: Property$TimelineScope,
  top?: Property$Top<TLength>protocol = protocol;
      }
    }

    if (extensions[PerMessageDeflate.extensionName]) {
      const params = extensions[PerMessageDeflate.extensionName].params;
      const value = extension.format({
        [PerMessageDeflate.extensionName]: [params]
      });
      headers.push(`Sec-WebSocket-Extensions: ${value}`);
      ws._extensions = extensions;
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers, req);

    socket.write(headers.concat('\r\n').join('\r\n'));
    socket.removeListener('error', socketOnError);

    ws.setSocket(socket, head, {
      allowSynchronousEvents: this.options.allowSynchronousEvents,
      maxPayload: this.options.maxPayload,
      skipUTF8Validation: this.options.skipUTF8Validation
    });

    if (this.clients) {
      this.clients.add(ws);
      ws.on('close', () => {
        this.clients.delete(ws);

        if (this._shouldEmitClose && !this.clients.size) {
          process.nextTick(emitClose, this);
        }
      });
    }

    cb(ws, req);
  }
}

module.exports = WebSocketServer;

/**
 * Add event listeners on an `EventEmitter` using a map of <event, listener>
 * pairs.
 *
 * @param {EventEmitter} server The event emitter
 * @param {Object.<String, Function>} map The listeners to add
 * @return {Function} A function that will remove the added listeners when
 *     called
 * @private
 */
function addListeners(server, map) {
  for (const event of Object.keys(map)) server.on(event, map[event]);

  return function removeListeners() {
    for (const event of Object.keys(map)) {
      server.removeListener(event, map[event]);
    }
  };
}

/**
 * Emit a `'close'` event on an `EventEmitter`.
 *
 * @param {EventEmitter} server The event emitter
 * @private
 */
function emitClose(server) {
  server._state = CLOSED;
  server.emit('close');
}

/**
 * Handle socket errors.
 *
 * @private
 */
function socketOnError() {
  this.destroy();
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {Duplex} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @param {Object} [headers] Additional HTTP response headers
 * @private
 */
function abortHandshake(socket, code, message, headers) {
  //
  // The socket is writable unless the user destroyed or ended it before calling
  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user
  // error. Handling this does not make much sense as the worst that can happen
  // is that some of the data written by the user might be discarded due to the
  // call to `socket.end()` below, which triggers an `'error'` event that in
  // turn causes the socket to be destroyed.
  //
  message = message || http.STATUS_CODES[code];
  headers = {
    Connection: 'close',
    'Content-Type': 'text/html',
    'Content-Length': Buffer.byteLength(message),
    ...headers
  };

  socket.once('finish', socket.destroy);

  socket.end(
    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
      Object.keys(headers)
        .map((h) => `${h}: ${headers[h]}`)
        .join('\r\n') +
      '\r\n\r\n' +
      message
  );
}

/**
 * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least
 * one listener for it, otherwise call `abortHandshake()`.
 *
 * @param {WebSocketServer} server The WebSocket server
 * @param {http.IncomingMessage} req The request object
 * @param {Duplex} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} message The HTTP response body
 * @param {Object} [headers] The HTTP response headers
 * @private
 */
function abortHandshakeOrEmitwsClientError(
  server,
  req,
  socket,
  code,
  message,
  headers
) {
  if (server.listenerCount('wsClientError')) {
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);

    server.emit('wsClientError', err, socket, req);
  } else {
    abortHandshake(socket, code, message, headers);
  }
}
