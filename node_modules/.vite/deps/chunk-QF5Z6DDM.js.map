{
  "version": 3,
  "sources": ["../../music-metadata/lib/id3v2/ID3v2Token.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\n/**\n * The picture type according to the ID3v2 APIC frame\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\n */\nexport const AttachedPictureType = {\n    0: 'Other',\n    1: \"32x32 pixels 'file icon' (PNG only)\",\n    2: 'Other file icon',\n    3: 'Cover (front)',\n    4: 'Cover (back)',\n    5: 'Leaflet page',\n    6: 'Media (e.g. label side of CD)',\n    7: 'Lead artist/lead performer/soloist',\n    8: 'Artist/performer',\n    9: 'Conductor',\n    10: 'Band/Orchestra',\n    11: 'Composer',\n    12: 'Lyricist/text writer',\n    13: 'Recording Location',\n    14: 'During recording',\n    15: 'During performance',\n    16: 'Movie/video screen capture',\n    17: 'A bright coloured fish',\n    18: 'Illustration',\n    19: 'Band/artist logotype',\n    20: 'Publisher/Studio logotype'\n};\n/**\n * https://id3.org/id3v2.3.0#Synchronised_lyrics.2Ftext\n */\nexport const LyricsContentType = {\n    other: 0,\n    lyrics: 1,\n    text: 2,\n    movement_part: 3,\n    events: 4,\n    chord: 5,\n    trivia_pop: 6,\n};\nexport const TimestampFormat = {\n    notSynchronized0: 0,\n    mpegFrameNumber: 1,\n    milliseconds: 2\n};\n/**\n * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\n * 4 * %0xxxxxxx\n */\nexport const UINT32SYNCSAFE = {\n    get: (buf, off) => {\n        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\n            ((buf[off + 1]) << 14) | ((buf[off]) << 21);\n    },\n    len: 4\n};\n/**\n * ID3v2 header\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n * ToDo\n */\nexport const ID3v2Header = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // ID3v2/file identifier   \"ID3\"\n            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),\n            // ID3v2 versionIndex\n            version: {\n                major: Token.INT8.get(buf, off + 3),\n                revision: Token.INT8.get(buf, off + 4)\n            },\n            // ID3v2 flags\n            flags: {\n                // Unsynchronisation\n                unsynchronisation: util.getBit(buf, off + 5, 7),\n                // Extended header\n                isExtendedHeader: util.getBit(buf, off + 5, 6),\n                // Experimental indicator\n                expIndicator: util.getBit(buf, off + 5, 5),\n                footer: util.getBit(buf, off + 5, 4)\n            },\n            size: UINT32SYNCSAFE.get(buf, off + 6)\n        };\n    }\n};\nexport const ExtendedHeader = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // Extended header size\n            size: Token.UINT32_BE.get(buf, off),\n            // Extended Flags\n            extendedFlags: Token.UINT16_BE.get(buf, off + 4),\n            // Size of padding\n            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\n            // CRC data present\n            crcDataPresent: util.getBit(buf, off + 4, 31)\n        };\n    }\n};\nexport const TextEncodingToken = {\n    len: 1,\n    get: (uint8Array, off) => {\n        switch (uint8Array[off]) {\n            case 0x00:\n                return { encoding: 'latin1' }; // binary\n            case 0x01:\n                return { encoding: 'utf-16le', bom: true };\n            case 0x02:\n                return { encoding: 'utf-16le', bom: false };\n            case 0x03:\n                return { encoding: 'utf8', bom: false };\n            default:\n                return { encoding: 'utf8', bom: false };\n        }\n    }\n};\n/**\n * Used to read first portion of `SYLT` frame\n */\nexport const TextHeader = {\n    len: 4,\n    get: (uint8Array, off) => {\n        return {\n            encoding: TextEncodingToken.get(uint8Array, off),\n            language: new Token.StringType(3, 'latin1').get(uint8Array, off + 1)\n        };\n    }\n};\n/**\n * Used to read first portion of `SYLT` frame\n */\nexport const SyncTextHeader = {\n    len: 6,\n    get: (uint8Array, off) => {\n        const text = TextHeader.get(uint8Array, off);\n        return {\n            encoding: text.encoding,\n            language: text.language,\n            timeStampFormat: Token.UINT8.get(uint8Array, off + 4),\n            contentType: Token.UINT8.get(uint8Array, off + 5)\n        };\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
