{
  "version": 3,
  "sources": ["../../music-metadata/lib/id3v2/FrameParser.js", "../../music-metadata/lib/id3v2/ID3v2Parser.js"],
  "sourcesContent": ["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { decodeUintBE } from '../common/Util.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.subarray(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.subarray(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.subarray(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = decodeUintBE(uint8Array);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const valueLen = length - offset - 1;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: valueLen > 0 ? util.decodeUintBE(uint8Array.subarray(offset + 1)) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.subarray(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.subarray(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.subarray(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.subarray(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.subarray(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.subarray(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.subarray(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n", "import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nimport { textDecode } from '@borewit/text-codec';\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.subarray(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.subarray(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.subarray(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.subarray(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 3), 'ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 4), 'ascii'),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.subarray(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n"],
  "mappings": "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",
  "names": ["initDebug", "makeUnexpectedMajorVersionError"]
}
