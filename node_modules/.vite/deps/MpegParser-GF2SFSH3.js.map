{
  "version": 3,
  "sources": ["../../music-metadata/lib/mpeg/MpegParser.js", "../../music-metadata/lib/mpeg/ReplayGainDataFormat.js", "../../music-metadata/lib/mpeg/ExtendedLameHeader.js", "../../music-metadata/lib/mpeg/XingTag.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as common from '../common/Util.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { InfoTagHeaderTag, LameEncoderVersion, readXingHeader } from './XingTag.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:mpeg');\nexport class MpegContentError extends makeUnexpectedFileContentError('MPEG') {\n}\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC', // Low Complexity\n        'AAC SSR', // Scalable Sample Rate\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, null, null, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // E(15,12): Bitrate index\n        this.bitrateIndex = null;\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = null;\n        // G(9): Padding bit\n        this.padding = null;\n        // H(8): Private bit\n        this.privateBit = null;\n        // I(7,6): Channel Mode\n        this.channelModeIndex = null;\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = null;\n        // L(2): Original\n        this.isOriginalMedia = null;\n        this.version = null;\n        this.bitrate = null;\n        this.samplingRate = null;\n        this.frameLength = 0;\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return this.samplingRate == null ? null : (numFrames * this.calcSamplesPerFrame() / this.samplingRate);\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n        return null;\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new MpegContentError('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new MpegContentError('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(\"layer=0 => ADTS\");\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = `ADTS/MPEG-${this.version}`;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join('+') : '?'}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return null;\n        }\n        if (this.version && this.bitrateIndex) {\n            const codecIndex = 10 * Math.floor(this.version) + this.layer;\n            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n        }\n        return null;\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03 || this.version === null || this.sampRateFreqIndex == null)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0: 44100, 1: 48000, 2: 32000 },\n    2: { 0: 22050, 1: 24000, 2: 16000 },\n    2.5: { 0: 11025, 1: 12000, 2: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return `V${Math.floor((100 - vbrScale) / 10)}`;\n}\nexport class MpegParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.offset = 0;\n        this.frame_size = 0;\n        this.crc = null;\n        this.calculateEofDuration = false;\n        this.samplesPerFrame = null;\n        this.buf_frame_header = new Uint8Array(4);\n        /**\n         * Number of bytes already parsed since beginning of stream / file\n         */\n        this.mpegOffset = null;\n        this.syncPeek = {\n            buf: new Uint8Array(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setAudioOnly();\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n                if (this.calculateEofDuration) {\n                    if (this.samplesPerFrame !== null) {\n                        const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            const duration = numberOfSamples / this.metadata.format.sampleRate;\n                            debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                            this.metadata.setFormat('duration', duration);\n                        }\n                    }\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = !!this.metadata.native.ID3v1;\n        if (this.mpegOffset !== null) {\n            if (format.duration && this.tokenizer.fileInfo.size) {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (format.codecProfile && format.codecProfile[0] === 'V') {\n                    this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n                }\n            }\n            if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (this.frame_size !== null && this.samplesPerFrame !== null) {\n                    const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    if (format.sampleRate && !format.duration) {\n                        const duration = numberOfSamples / format.sampleRate;\n                        debug(\"Calculate CBR duration based on file size: %s\", duration);\n                        this.metadata.setFormat('duration', duration);\n                    }\n                }\n            }\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                gotFirstSync = false;\n                bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                if (bo === -1) {\n                    if (this.syncPeek.len < this.syncPeek.buf.length) {\n                        throw new EndOfStreamError();\n                    }\n                    await this.tokenizer.ignore(this.syncPeek.len);\n                    break; // continue with next buffer\n                }\n                ++bo;\n                gotFirstSync = true;\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            if (err instanceof Error) {\n                this.metadata.addWarning(`Parse error: ${err.message}`);\n                return false; // sync\n            }\n            throw err;\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new MpegContentError('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        if (header.bitrate !== null && header.samplingRate != null) {\n            const fsize = (bps * header.bitrate / header.samplingRate) + ((header.padding) ? slot_size : 0);\n            this.frame_size = Math.floor(fsize);\n        }\n        this.audioFrameHeader = header;\n        if (header.bitrate !== null) {\n            this.bitrates.push(header.bitrate);\n        }\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 4) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        await this.skipSideInformation();\n        return false;\n    }\n    async parseAdts(header) {\n        const buf = new Uint8Array(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        if (header.samplingRate !== null) {\n            const framesPerSec = header.samplingRate / this.samplesPerFrame;\n            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n            this.metadata.setFormat('bitrate', bitrate);\n            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        }\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        if (this.audioFrameHeader) {\n            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n            if (sideinfo_length !== null) {\n                await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n                // side information\n                this.offset += sideinfo_length;\n                await this.readXtraInfoHeader();\n                return;\n            }\n        }\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(InfoTagHeaderTag);\n        this.offset += InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing': {\n                const infoTag = await this.readXingInfoHeader();\n                if (infoTag.vbrScale !== null) {\n                    const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                    this.metadata.setFormat('codecProfile', codecProfile);\n                }\n                return null;\n            }\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME': {\n                const version = await this.tokenizer.readToken(LameEncoderVersion);\n                if (this.frame_size !== null && this.frame_size >= this.offset + LameEncoderVersion.len) {\n                    this.offset += LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', `LAME ${version}`);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                this.metadata.addWarning('Corrupt LAME header');\n                break;\n            }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await readXingHeader(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', `LAME ${common.stripNulls(infoTag.lame.version)}`);\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new MpegContentError('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\n", "import * as common from '../common/Util.js';\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nconst NameCode = {\n    /**\n     * not set\n     */\n    not_set: 0,\n    /**\n     * Radio Gain Adjustment\n     */\n    radio: 1,\n    /**\n     * Audiophile Gain Adjustment\n     */\n    audiophile: 2\n};\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nconst ReplayGainOriginator = {\n    /**\n     * Replay Gain unspecified\n     */\n    unspecified: 0,\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    engineer: 1,\n    /**\n     * Replay Gain set by user\n     */\n    user: 2,\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    automatic: 3,\n    /**\n     * Set by simple RMS average\n     */\n    rms_average: 4\n};\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexport const ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n", "/**\n * Extended Lame Header\n */\nimport * as Token from 'token-types';\nimport * as common from '../common/Util.js';\nimport { ReplayGain } from './ReplayGainDataFormat.js';\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexport const ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,\n            track_gain: ReplayGain.get(buf, 6),\n            album_gain: ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n", "import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { ExtendedLameHeader } from './ExtendedLameHeader.js';\n/**\n * Info Tag: Xing, LAME\n */\nexport const InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexport const LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexport const XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nexport async function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(XingHeaderFlags);\n    const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = new Uint8Array(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match !== null) {\n            const majorMinorVersion = match[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => Number.parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
