{
  "version": 3,
  "sources": ["../../music-metadata/lib/wav/WaveParser.js", "../../music-metadata/lib/riff/RiffChunk.js", "../../music-metadata/lib/wav/WaveChunk.js", "../../music-metadata/lib/wav/BwfChunk.js"],
  "sourcesContent": ["import * as strtok3 from 'strtok3';\nimport * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as riff from '../riff/RiffChunk.js';\nimport * as WaveChunk from './WaveChunk.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport * as util from '../common/Util.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BroadcastAudioExtensionChunk } from './BwfChunk.js';\nimport { WaveContentError } from './WaveChunk.js';\nconst debug = initDebug('music-metadata:parser:RIFF');\n/**\n * Resource Interchange File Format (RIFF) Parser\n *\n * WAVE PCM soundfile format\n *\n * Ref:\n * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\n * - http://soundfile.sapp.org/doc/WaveFormat\n *\n * ToDo: Split WAVE part from RIFF parser\n */\nexport class WaveParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.blockAlign = 0;\n    }\n    async parse() {\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\n        if (riffHeader.chunkID !== 'RIFF')\n            return; // Not RIFF format\n        this.metadata.setAudioOnly();\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\n            if (!(err instanceof strtok3.EndOfStreamError)) {\n                throw err;\n            }\n        });\n    }\n    async parseRiffChunk(chunkSize) {\n        const type = await this.tokenizer.readToken(FourCcToken);\n        this.metadata.setFormat('container', type);\n        switch (type) {\n            case 'WAVE':\n                return this.readWaveChunk(chunkSize - FourCcToken.len);\n            default:\n                throw new WaveContentError(`Unsupported RIFF format: RIFF/${type}`);\n        }\n    }\n    async readWaveChunk(remaining) {\n        while (remaining >= riff.Header.len) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            remaining -= riff.Header.len + header.chunkSize;\n            if (header.chunkSize > remaining) {\n                this.metadata.addWarning('Data chunk size exceeds file size');\n            }\n            this.header = header;\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\n            switch (header.chunkID) {\n                case 'LIST':\n                    await this.parseListTag(header);\n                    break;\n                case 'fact': // extended Format chunk,\n                    this.metadata.setFormat('lossless', false);\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\n                    break;\n                case 'fmt ': { // The Util Chunk, non-PCM Formats\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\n                    let subFormat = WaveChunk.WaveFormatNameMap[fmt.wFormatTag];\n                    if (!subFormat) {\n                        debug(`WAVE/non-PCM format=${fmt.wFormatTag}`);\n                        subFormat = `non-PCM (${fmt.wFormatTag})`;\n                    }\n                    this.metadata.setFormat('codec', subFormat);\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\n                    this.blockAlign = fmt.nBlockAlign;\n                    break;\n                }\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\n                case 'ID3 ': { // The way Mp3Tags stores ID3 meta-data\n                    const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                    const rst = strtok3.fromBuffer(id3_data);\n                    await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                    break;\n                }\n                case 'data': { // PCM-data\n                    if (this.metadata.format.lossless !== false) {\n                        this.metadata.setFormat('lossless', true);\n                    }\n                    let chunkSize = header.chunkSize;\n                    if (this.tokenizer.fileInfo.size) {\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\n                        if (calcRemaining < chunkSize) {\n                            this.metadata.addWarning('data chunk length exceeding file length');\n                            chunkSize = calcRemaining;\n                        }\n                    }\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\n                    if (numberOfSamples) {\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\n                        }\n                    }\n                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps\n                        this.metadata.setFormat('bitrate', 352000);\n                    }\n                    else if (this.metadata.format.sampleRate) {\n                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);\n                    }\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                }\n                case 'bext': { // Broadcast Audio Extension chunk\thttps://tech.ebu.ch/docs/tech/tech3285.pdf\n                    const bext = await this.tokenizer.readToken(BroadcastAudioExtensionChunk);\n                    Object.keys(bext).forEach(key => {\n                        this.metadata.addTag('exif', `bext.${key}`, bext[key]);\n                    });\n                    const bextRemaining = header.chunkSize - BroadcastAudioExtensionChunk.len;\n                    await this.tokenizer.ignore(bextRemaining);\n                    break;\n                }\n                case '\\x00\\x00\\x00\\x00': // padding ??\n                    debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                default:\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n            }\n            if (this.header.chunkSize % 2 === 1) {\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\n                await this.tokenizer.ignore(1);\n            }\n        }\n    }\n    async parseListTag(listHeader) {\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'latin1'));\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\n        switch (listType) {\n            case 'INFO':\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\n            default:\n                this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${listType}`);\n                debug(`Ignoring chunkID=RIFF/WAVE/LIST/${listType}`);\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\n        }\n    }\n    async parseRiffInfoTags(chunkSize) {\n        while (chunkSize >= 8) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            const valueToken = new riff.ListInfoTagValue(header);\n            const value = await this.tokenizer.readToken(valueToken);\n            this.addTag(header.chunkID, util.stripNulls(value));\n            chunkSize -= (8 + valueToken.len);\n        }\n        if (chunkSize !== 0) {\n            throw new WaveContentError(`Illegal remaining size: ${chunkSize}`);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('exif', id, value);\n    }\n}\n", "import * as Token from 'token-types';\n/**\n * Common RIFF chunk header\n */\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: new Token.StringType(4, 'latin1').get(buf, off),\n            // Size\n            chunkSize: Token.UINT32_LE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Token to parse RIFF-INFO tag value\n */\nexport class ListInfoTagValue {\n    constructor(tagHeader) {\n        this.tagHeader = tagHeader;\n        this.len = tagHeader.chunkSize;\n        this.len += this.len & 1; // if it is an odd length, round up to even\n    }\n    get(buf, off) {\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n    }\n}\n", "import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class WaveContentError extends makeUnexpectedFileContentError('Wave') {\n}\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nexport const WaveFormat = {\n    PCM: 0x0001,\n    // MPEG-4 and AAC Audio Types\n    ADPCM: 0x0002,\n    IEEE_FLOAT: 0x0003,\n    MPEG_ADTS_AAC: 0x1600,\n    MPEG_LOAS: 0x1602,\n    RAW_AAC1: 0x00FF,\n    // Dolby Audio Types\n    DOLBY_AC3_SPDIF: 0x0092,\n    DVM: 0x2000,\n    RAW_SPORT: 0x0240,\n    ESST_AC3: 0x0241,\n    DRM: 0x0009,\n    DTS2: 0x2001,\n    MPEG: 0x0050\n};\nexport const WaveFormatNameMap = {\n    [WaveFormat.PCM]: 'PCM',\n    [WaveFormat.ADPCM]: 'ADPCM',\n    [WaveFormat.IEEE_FLOAT]: 'IEEE_FLOAT',\n    [WaveFormat.MPEG_ADTS_AAC]: 'MPEG_ADTS_AAC',\n    [WaveFormat.MPEG_LOAS]: 'MPEG_LOAS',\n    [WaveFormat.RAW_AAC1]: 'RAW_AAC1',\n    [WaveFormat.DOLBY_AC3_SPDIF]: 'DOLBY_AC3_SPDIF',\n    [WaveFormat.DVM]: 'DVM',\n    [WaveFormat.RAW_SPORT]: 'RAW_SPORT',\n    [WaveFormat.ESST_AC3]: 'ESST_AC3',\n    [WaveFormat.DRM]: 'DRM',\n    [WaveFormat.DTS2]: 'DTS2',\n    [WaveFormat.MPEG]: 'MPEG'\n};\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nexport class Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new WaveContentError('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: Token.UINT16_LE.get(buf, off),\n            nChannels: Token.UINT16_LE.get(buf, off + 2),\n            nSamplesPerSec: Token.UINT32_LE.get(buf, off + 4),\n            nAvgBytesPerSec: Token.UINT32_LE.get(buf, off + 8),\n            nBlockAlign: Token.UINT16_LE.get(buf, off + 12),\n            wBitsPerSample: Token.UINT16_LE.get(buf, off + 14)\n        };\n    }\n}\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nexport class FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new WaveContentError('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: Token.UINT32_LE.get(buf, off)\n        };\n    }\n}\n", "import * as Token from 'token-types';\nimport { stripNulls } from '../common/Util.js';\n/**\n * Broadcast Audio Extension Chunk\n * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf\n */\nexport const BroadcastAudioExtensionChunk = {\n    len: 420,\n    get: (uint8array, off) => {\n        return {\n            description: stripNulls(new Token.StringType(256, 'ascii').get(uint8array, off)).trim(),\n            originator: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),\n            originatorReference: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),\n            originationDate: stripNulls(new Token.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),\n            originationTime: stripNulls(new Token.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),\n            timeReferenceLow: Token.UINT32_LE.get(uint8array, off + 338),\n            timeReferenceHigh: Token.UINT32_LE.get(uint8array, off + 342),\n            version: Token.UINT16_LE.get(uint8array, off + 346),\n            umid: new Token.Uint8ArrayType(64).get(uint8array, off + 348),\n            loudnessValue: Token.UINT16_LE.get(uint8array, off + 412),\n            maxTruePeakLevel: Token.UINT16_LE.get(uint8array, off + 414),\n            maxMomentaryLoudness: Token.UINT16_LE.get(uint8array, off + 416),\n            maxShortTermLoudness: Token.UINT16_LE.get(uint8array, off + 418)\n        };\n    }\n};\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
