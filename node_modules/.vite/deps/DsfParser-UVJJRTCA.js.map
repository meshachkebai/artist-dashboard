{
  "version": 3,
  "sources": ["../../music-metadata/lib/dsf/DsfParser.js", "../../music-metadata/lib/dsf/DsfChunk.js"],
  "sourcesContent": ["import initDebug from 'debug';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { ChunkHeader, DsdChunk, FormatChunk } from './DsfChunk.js';\nimport { ID3v2Parser } from \"../id3v2/ID3v2Parser.js\";\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:DSF');\nexport class DsdContentParseError extends makeUnexpectedFileContentError('DSD') {\n}\n/**\n * DSF (dsd stream file) File Parser\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n */\nexport class DsfParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const p0 = this.tokenizer.position; // mark start position, normally 0\n        const chunkHeader = await this.tokenizer.readToken(ChunkHeader);\n        if (chunkHeader.id !== 'DSD ')\n            throw new DsdContentParseError('Invalid chunk signature');\n        this.metadata.setFormat('container', 'DSF');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setAudioOnly();\n        const dsdChunk = await this.tokenizer.readToken(DsdChunk);\n        if (dsdChunk.metadataPointer === BigInt(0)) {\n            debug(\"No ID3v2 tag present\");\n        }\n        else {\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\n            // Jump to ID3 header\n            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);\n            return new ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\n        }\n    }\n    async parseChunks(bytesRemaining) {\n        while (bytesRemaining >= ChunkHeader.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader);\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\n            switch (chunkHeader.id) {\n                case 'fmt ': {\n                    const formatChunk = await this.tokenizer.readToken(FormatChunk);\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\n                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\n                    this.metadata.setFormat('bitrate', bitrate);\n                    return; // We got what we want, stop further processing of chunks\n                }\n                default:\n                    this.tokenizer.ignore(Number(chunkHeader.size) - ChunkHeader.len);\n                    break;\n            }\n            bytesRemaining -= chunkHeader.size;\n        }\n    }\n}\n", "import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: Token.INT64_LE.get(buf, off),\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nexport const ChannelType = {\n    mono: 1,\n    stereo: 2,\n    channels: 3,\n    quad: 4,\n    '4 channels': 5,\n    '5 channels': 6,\n    '5.1 channels': 7\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: Token.INT32_LE.get(buf, off),\n            formatID: Token.INT32_LE.get(buf, off + 4),\n            channelType: Token.INT32_LE.get(buf, off + 8),\n            channelNum: Token.INT32_LE.get(buf, off + 12),\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
