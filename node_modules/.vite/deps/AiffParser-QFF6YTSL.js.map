{
  "version": 3,
  "sources": ["../../music-metadata/lib/aiff/AiffParser.js", "../../music-metadata/lib/aiff/AiffToken.js", "../../music-metadata/lib/iff/index.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport * as AiffToken from './AiffToken.js';\nimport { AiffContentError, compressionTypes } from './AiffToken.js';\nimport * as iff from '../iff/index.js';\nconst debug = initDebug('music-metadata:parser:aiff');\n/**\n * AIFF - Audio Interchange File Format\n *\n * Ref:\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf\n */\nexport class AIFFParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.isCompressed = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(iff.Header);\n        if (header.chunkID !== 'FORM')\n            throw new AiffContentError('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\n        const type = await this.tokenizer.readToken(FourCcToken);\n        switch (type) {\n            case 'AIFF':\n                this.metadata.setFormat('container', type);\n                this.isCompressed = false;\n                break;\n            case 'AIFC':\n                this.metadata.setFormat('container', 'AIFF-C');\n                this.isCompressed = true;\n                break;\n            default:\n                throw new AiffContentError(`Unsupported AIFF type: ${type}`);\n        }\n        this.metadata.setFormat('lossless', !this.isCompressed);\n        this.metadata.setAudioOnly();\n        try {\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\n                debug(`Reading AIFF chunk at offset=${this.tokenizer.position}`);\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\n                const bytesRead = await this.readData(chunkHeader);\n                await this.tokenizer.ignore(nextChunk - bytesRead);\n            }\n        }\n        catch (err) {\n            if (err instanceof strtok3.EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async readData(header) {\n        switch (header.chunkID) {\n            case 'COMM': { // The Common Chunk\n                if (this.isCompressed === null) {\n                    throw new AiffContentError('Failed to parse AIFF.COMM chunk when compression type is unknown');\n                }\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\n                this.metadata.setFormat('sampleRate', common.sampleRate);\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\n                if (common.compressionName || common.compressionType) {\n                    this.metadata.setFormat('codec', common.compressionName ?? compressionTypes[common.compressionType]);\n                }\n                return header.chunkSize;\n            }\n            case 'ID3 ': { // ID3-meta-data\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                return header.chunkSize;\n            }\n            case 'SSND': // Sound Data Chunk\n                if (this.metadata.format.duration) {\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\n                }\n                return 0;\n            case 'NAME': // Sample name chunk\n            case 'AUTH': // Author chunk\n            case '(c) ': // Copyright chunk\n            case 'ANNO': // Annotation chunk\n                return this.readTextChunk(header);\n            default:\n                debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);\n                return 0;\n        }\n    }\n    async readTextChunk(header) {\n        const value = await this.tokenizer.readToken(new Token.StringType(header.chunkSize, 'ascii'));\n        const values = value.split('\\0').map(v => v.trim()).filter(v => v?.length);\n        await Promise.all(values.map(v => this.metadata.addTag('AIFF', header.chunkID, v)));\n        return header.chunkSize;\n    }\n}\n", "import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport const compressionTypes = {\n    NONE: 'not compressed\tPCM\tApple Computer',\n    sowt: 'PCM (byte swapped)',\n    fl32: '32-bit floating point IEEE 32-bit float',\n    fl64: '64-bit floating point IEEE 64-bit float\tApple Computer',\n    alaw: 'ALaw 2:1\t8-bit ITU-T G.711 A-law',\n    ulaw: 'µLaw 2:1\t8-bit ITU-T G.711 µ-law\tApple Computer',\n    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',\n    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',\n    FL32: 'Float 32\tIEEE 32-bit float '\n};\nexport class AiffContentError extends makeUnexpectedFileContentError('AIFF') {\n}\nexport class Common {\n    constructor(header, isAifc) {\n        this.isAifc = isAifc;\n        const minimumChunkSize = isAifc ? 22 : 18;\n        if (header.chunkSize < minimumChunkSize)\n            throw new AiffContentError(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n        const shift = Token.UINT16_BE.get(buf, off + 8) - 16398;\n        const baseSampleRate = Token.UINT16_BE.get(buf, off + 8 + 2);\n        const res = {\n            numChannels: Token.UINT16_BE.get(buf, off),\n            numSampleFrames: Token.UINT32_BE.get(buf, off + 2),\n            sampleSize: Token.UINT16_BE.get(buf, off + 6),\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n        };\n        if (this.isAifc) {\n            res.compressionType = FourCcToken.get(buf, off + 18);\n            if (this.len > 22) {\n                const strLen = Token.UINT8.get(buf, off + 22);\n                if (strLen > 0) {\n                    const padding = (strLen + 1) % 2;\n                    if (23 + strLen + padding === this.len) {\n                        res.compressionName = new Token.StringType(strLen, 'latin1').get(buf, off + 23);\n                    }\n                    else {\n                        throw new AiffContentError('Illegal pstring length');\n                    }\n                }\n                else {\n                    res.compressionName = undefined;\n                }\n            }\n        }\n        else {\n            res.compressionName = 'PCM';\n        }\n        return res;\n    }\n}\n", "import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * Common AIFF chunk header\n */\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Chunk type ID\n            chunkID: FourCcToken.get(buf, off),\n            // Chunk size\n            chunkSize: Number(BigInt(Token.UINT32_BE.get(buf, off + 4)))\n        };\n    }\n};\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
