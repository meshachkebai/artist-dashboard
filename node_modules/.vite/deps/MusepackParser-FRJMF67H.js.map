{
  "version": 3,
  "sources": ["../../music-metadata/lib/musepack/MusepackParser.js", "../../music-metadata/lib/musepack/sv8/MpcSv8Parser.js", "../../music-metadata/lib/musepack/sv8/StreamVersion8.js", "../../music-metadata/lib/musepack/MusepackConentError.js", "../../music-metadata/lib/musepack/sv7/MpcSv7Parser.js", "../../music-metadata/lib/musepack/sv7/BitReader.js", "../../music-metadata/lib/musepack/sv7/StreamVersion7.js"],
  "sourcesContent": ["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\nimport { MusepackContentError } from './MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MusepackParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Stream-version 7');\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            case 'MPC': {\n                debug('Stream-version 8');\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            default: {\n                throw new MusepackContentError('Invalid signature prefix');\n            }\n        }\n        this.metadata.setAudioOnly();\n        return mpcParser.parse();\n    }\n}\n", "import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { tryParseApeHeader } from '../../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport * as SV8 from './StreamVersion8.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv8Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCcToken);\n        if (signature !== 'MPCK')\n            throw new MusepackContentError('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': { // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                }\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    if (this.metadata.format.duration) {\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    }\n                    return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\n            }\n            // biome-ignore lint/correctness/noConstantCondition: break is handled in the switch statement\n        } while (true);\n    }\n}\n", "import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../../common/Util.js';\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'latin1');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nexport class StreamReader {\n    get tokenizer() {\n        return this._tokenizer;\n    }\n    set tokenizer(value) {\n        this._tokenizer = value;\n    }\n    constructor(_tokenizer) {\n        this._tokenizer = _tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\n", "import { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\n}\n", "import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { tryParseApeHeader } from '../../apev2/APEv2Parser.js';\nimport { BitReader } from './BitReader.js';\nimport * as SV7 from './StreamVersion7.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv7Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.bitreader = null;\n        this.audioLength = 0;\n        this.duration = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new MusepackContentError('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        if (this.duration !== null) {\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n        }\n    }\n}\n", "import * as Token from 'token-types';\nexport class BitReader {\n    constructor(tokenizer) {\n        this.pos = 0;\n        this.dword = null;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === null) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        this.pos -= 32;\n        if (this.pos === 0) {\n            this.dword = null;\n            return out & ((1 << bits) - 1);\n        }\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        if (this.pos) {\n            out <<= this.pos;\n            out |= this.dword >>> (32 - this.pos);\n        }\n        return out & ((1 << bits) - 1);\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = null;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\n", "import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\nimport { textDecode } from '@borewit/text-codec';\n/**\n * BASIC STRUCTURE\n */\nexport const Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: textDecode(buf.subarray(off, off + 3), 'latin1'),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n"],
  "mappings": "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",
  "names": ["import_debug", "import_debug", "initDebug", "debug", "initDebug", "import_debug", "debug", "initDebug", "debug", "initDebug"]
}
