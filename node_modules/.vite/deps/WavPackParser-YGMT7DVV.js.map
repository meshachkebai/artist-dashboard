{
  "version": 3,
  "sources": ["../../music-metadata/lib/wavpack/WavPackToken.js", "../../music-metadata/lib/wavpack/WavPackParser.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nexport const BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: isBitSet(flags, 2),\n                isHybrid: isBitSet(flags, 3),\n                isJointStereo: isBitSet(flags, 4),\n                crossChannel: isBitSet(flags, 5),\n                hybridNoiseShaping: isBitSet(flags, 6),\n                floatingPoint: isBitSet(flags, 7),\n                samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],\n                isDSD: isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nexport const MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: getBitAllignedNumber(buf[off], 0, 6), // functionId overlaps with isOptional flag\n            isOptional: isBitSet(buf[off], 5),\n            isOddSize: isBitSet(buf[off], 6),\n            largeBlock: isBitSet(buf[off], 7)\n        };\n    }\n};\nfunction isBitSet(flags, bitOffset) {\n    return getBitAllignedNumber(flags, bitOffset, 1) === 1;\n}\nfunction getBitAllignedNumber(flags, bitOffset, len) {\n    return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n}\n", "import * as Token from 'token-types';\nimport { tryParseApeHeader } from '../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BlockHeaderToken, MetadataIdToken } from './WavPackToken.js';\nimport initDebug from 'debug';\nimport { uint8ArrayToHex } from 'uint8array-extras';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:WavPack');\nexport class WavPackContentError extends makeUnexpectedFileContentError('WavPack') {\n}\n/**\n * WavPack Parser\n */\nexport class WavPackParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioDataSize = 0;\n    }\n    async parse() {\n        this.metadata.setAudioOnly();\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new WavPackContentError('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= BlockHeaderToken.len);\n        if (this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n        }\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param header Header\n     * @param remainingLength Remaining length\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        let remaining = remainingLength;\n        while (remaining > MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: { // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << Token.UINT8.get(data, 0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new WavPackContentError('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                }\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${uint8ArrayToHex(data)}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remaining -= MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remaining}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remaining !== 0)\n            throw new WavPackContentError('metadata-sub-block should fit it remaining length');\n    }\n}\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
