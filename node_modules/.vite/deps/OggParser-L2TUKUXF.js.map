{
  "version": 3,
  "sources": ["../../music-metadata/lib/ogg/OggParser.js", "../../music-metadata/lib/ogg/opus/Opus.js", "../../music-metadata/lib/ogg/opus/OpusStream.js", "../../music-metadata/lib/ogg/speex/SpeexStream.js", "../../music-metadata/lib/ogg/speex/Speex.js", "../../music-metadata/lib/ogg/theora/TheoraStream.js", "../../music-metadata/lib/ogg/theora/Theora.js", "../../music-metadata/lib/ogg/OggToken.js", "../../music-metadata/lib/ogg/flac/FlacStream.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisStream } from './vorbis/VorbisStream.js';\nimport { OpusStream } from './opus/OpusStream.js';\nimport { SpeexStream } from './speex/SpeexStream.js';\nimport { TheoraStream } from './theora/TheoraStream.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { PageHeader, SegmentTable } from './OggToken.js';\nimport { FlacStream } from './flac/FlacStream.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nclass OggStream {\n    constructor(metadata, streamSerial, options) {\n        this.pageNumber = 0;\n        this.closed = false;\n        this.metadata = metadata;\n        this.streamSerial = streamSerial;\n        this.options = options;\n    }\n    async parsePage(tokenizer, header) {\n        this.pageNumber = header.pageSequenceNo;\n        debug('serial=%s page#=%s, Ogg.id=%s', header.streamSerialNumber, header.pageSequenceNo, header.capturePattern);\n        const segmentTable = await tokenizer.readToken(new SegmentTable(header));\n        debug('totalPageSize=%s', segmentTable.totalPageSize);\n        const pageData = await tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n        debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n        if (header.headerType.firstPage) {\n            this.metadata.setFormat('container', 'Ogg');\n            const idData = pageData.subarray(0, 7); // Copy this portion\n            const asciiId = Array.from(idData)\n                .filter(b => b >= 32 && b <= 126) // Keep only printable ASCII\n                .map(b => String.fromCharCode(b))\n                .join('');\n            switch (asciiId) {\n                case 'vorbis': // Ogg/Vorbis\n                    debug(`Set Ogg stream serial ${header.streamSerialNumber}, codec=Vorbis`);\n                    this.pageConsumer = new VorbisStream(this.metadata, this.options);\n                    break;\n                case 'OpusHea': // Ogg/Opus\n                    debug('Set page consumer to Ogg/Opus');\n                    this.pageConsumer = new OpusStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'Speex  ': // Ogg/Speex\n                    debug('Set page consumer to Ogg/Speex');\n                    this.pageConsumer = new SpeexStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'fishead':\n                case 'theora': // Ogg/Theora\n                    debug('Set page consumer to Ogg/Theora');\n                    this.pageConsumer = new TheoraStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'FLAC': // Ogg/Theora\n                    debug('Set page consumer to Vorbis');\n                    this.pageConsumer = new FlacStream(this.metadata, this.options, tokenizer);\n                    break;\n                default:\n                    throw new OggContentError(`Ogg codec not recognized (id=${asciiId}`);\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.closed = true;\n        }\n        if (this.pageConsumer) {\n            await this.pageConsumer.parsePage(header, pageData);\n        }\n        else\n            throw new Error('pageConsumer should be initialized');\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.streams = new Map();\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        this.streams = new Map();\n        let header;\n        try {\n            do {\n                header = await this.tokenizer.readToken(PageHeader);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                let stream = this.streams.get(header.streamSerialNumber);\n                if (!stream) {\n                    stream = new OggStream(this.metadata, header.streamSerialNumber, this.options);\n                    this.streams.set(header.streamSerialNumber, stream);\n                }\n                await stream.parsePage(this.tokenizer, header);\n                if (stream.pageNumber > 12 && !(this.options.duration && [...this.streams.values()].find(stream => stream.pageConsumer?.durationOnLastPage))) {\n                    debug(\"Stop processing Ogg stream\");\n                    break;\n                }\n            } while (![...this.streams.values()].every(item => item.closed));\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"Reached end-of-stream\");\n            }\n            else if (err instanceof OggContentError) {\n                this.metadata.addWarning(`Corrupt Ogg content at ${this.tokenizer.position}`);\n            }\n            else\n                throw err;\n        }\n        for (const stream of this.streams.values()) {\n            if (!stream.closed) {\n                this.metadata.addWarning(`End-of-stream reached before reaching last page in Ogg stream serial=${stream.streamSerial}`);\n                await stream.pageConsumer?.flush();\n            }\n            stream.pageConsumer?.calculateDuration();\n        }\n    }\n}\n", "import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n", "import * as Token from 'token-types';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggStream\n */\nexport class OpusStream extends VorbisStream {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.idHeader = null;\n        this.lastPos = -1;\n        this.tokenizer = tokenizer;\n        this.durationOnLastPage = true;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n        this.metadata.setAudioOnly();\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = this.lastPageHeader.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n", "import initDebug from 'debug';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexStream extends VorbisStream {\n    constructor(metadata, options, _tokenizer) {\n        super(metadata, options);\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n        this.metadata.setAudioOnly();\n    }\n}\n", "import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n", "import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraStream {\n    constructor(metadata, _options, _tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n        this.metadata.setFormat('hasVideo', true);\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n", "import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n", "import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { StringType } from 'token-types';\nexport const PageHeader = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: new StringType(4, 'latin1').get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n", "import initDebug from 'debug';\nimport * as Flac from '../../flac/FlacToken.js';\nimport { FlacParser } from '../../flac/FlacParser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport { VorbisPictureToken } from '../vorbis/Vorbis.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://xiph.org/flac/ogg_mapping.html\n */\nexport class FlacStream {\n    constructor(metadata, options, tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n        this.options = options;\n        this.tokenizer = tokenizer;\n        this.flacParser = new FlacParser(this.metadata, this.tokenizer, options);\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/FLAC page');\n        const fourCC = await FourCcToken.get(pageData, 9);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new Error('Invalid FLAC preamble');\n        }\n        const blockHeader = await Flac.BlockHeader.get(pageData, 13);\n        await this.parseDataBlock(blockHeader, pageData.subarray(13 + Flac.BlockHeader.len));\n    }\n    async parseDataBlock(blockHeader, pageData) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO: {\n                const streamInfo = Flac.BlockStreamInfo.get(pageData, 0);\n                return this.flacParser.processsStreamInfo(streamInfo);\n            }\n            case Flac.BlockType.PADDING:\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.flacParser.parseComment(pageData);\n            case Flac.BlockType.PICTURE:\n                if (!this.options.skipCovers) {\n                    const picture = new VorbisPictureToken(pageData.length).get(pageData, 0);\n                    return this.flacParser.addPictureTag(picture);\n                }\n                break;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_debug", "initDebug", "import_debug", "debug", "initDebug", "import_debug", "debug", "initDebug", "debug", "initDebug", "stream", "_a"]
}
