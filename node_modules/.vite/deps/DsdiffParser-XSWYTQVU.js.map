{
  "version": 3,
  "sources": ["../../music-metadata/lib/dsdiff/DsdiffParser.js", "../../music-metadata/lib/dsdiff/DsdiffToken.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { ChunkHeader64 } from './DsdiffToken.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:aiff');\nexport class DsdiffContentParseError extends makeUnexpectedFileContentError('DSDIFF') {\n}\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport class DsdiffParser extends BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new DsdiffContentParseError('Unexpected chunk-ID');\n        this.metadata.setAudioOnly();\n        const type = (await this.tokenizer.readToken(FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCcToken.len));\n            default:\n                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': { // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            }\n            case 'PROP': { // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCcToken);\n                if (propType !== 'SND ')\n                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCcToken.len));\n                break;\n            }\n            case 'ID3': { // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            }\n            case 'DSD':\n                if (this.metadata.format.numberOfChannels) {\n                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                }\n                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {\n                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                }\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': { // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                }\n                case 'CHNL': { // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                }\n                case 'CMPR': { // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                }\n                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                }\n                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                }\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\n", "import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport const ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n"],
  "mappings": "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",
  "names": ["initDebug"]
}
